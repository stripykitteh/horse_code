#
# sectional_parse_loop.py
# -----------------------
# Loop through all of the races and extract the sectional data
#

import glob
import re
import pathlib
from bs4 import BeautifulSoup
import sys
from datetime import datetime
from decimal import Decimal
from re import sub
import csv

def only_numerics(seq):
    return ''.join(c for c in seq if (c.isdigit() or c =='.'))

# race fields
fields = ['r1_l8', 'r1_l6', 'r1_l4', 'r1_l2', 'r2_l8', 'r2_l6', 'r2_l4', 'r2_l2', 'r3_l8', 'r3_l6', 'r3_l4', 'r3_l2', 'r4_l8', 'r4_l6', 'r4_l4', 'r4_l2', 'r5_l8', 'r5_l6', 'r5_l4', 'r5_l2']
print("fields=>", fields)

# Open a file for writing
with open('/Users/phillipmonk/research_paper/horse_code/data/sectional_data.csv', 'w') as csvfile:
    # create a new writer object
    csvwriter = csv.writer(csvfile)

    # writing the fields
    csvwriter.writerow(fields)

    # write the data rows
    for file in glob.glob("/Users/phillipmonk/research_paper/html/sectionls_test/*.html"):
        with open(file) as fp:
            print("file=>", file)
            soup = BeautifulSoup(fp, "html.parser")

            # Race Parent
            parent = []

            # Course
            race_course = soup.find("div", {"class": "_0bTO7kg5XVVoXUyVBR5Rzg=="}).text
            parent.append(race_course)      

            # Race No
            race_no = file.split("_")[-1].split(".")[0]
            parent.append(race_no)

            # Combine date and time
            race_header = soup.find_all("div", {"class": "X9ezXxrYROFcJlULNUEJWQ=="})
            datetime = datetime.strptime(race_header[1].text + " " + race_header[2].text, "%A, %d %B %Y %I:%M%p")
            parent.append(str(datetime))
        
            # Format distance and class
            parent.append(race_header[3].text[:-1])
            parent.append(race_header[4].text)

            # Track Condition
            track_cond = soup.find_all("div", {"class": "flex justify-center items-center mt-2"})
            parent.append(track_cond[-1].text.split(" ")[1].split("\xa0")[0])

            # Track Rail
            track_rail_all = soup.find("div", {"class": "flex flex-col justify-center"})

            track_rail = track_rail_all.find("div", {"class": "index_rdc-basic-text__AyDZW rdc-two-lines leading-tight header__trackrail__detail"})
            parent.append(track_rail.text)

            # Race Details
            # <div class="index_rdc-basic-text__AyDZW rdc-one-line">
            #race_details = soup.find_all("div", {"class": "index_rdc-basic-text__AyDZW rdc-one-line"})
            #print("race_details=> " + race_details[5].text)

            # Race Time
            race_time_list = soup.find_all("div", {"class": "mr-6 flex"})
            race_time = race_time_list[0].find_all("div", {"class": "index_rdc-basic-text__AyDZW"})
            race_time_secs = sum(float(x) * 60 ** i for i, x in enumerate(reversed(race_time[1].text.split("\xa0")[0].split(':'))))
            parent.append(str(round(race_time_secs,2)))

            # Prize Money
            prize_money_list = soup.find_all("div", {"class": "rdc-form-parent flex"})
            for element in prize_money_list:
                element_text = element.get_text()
                if "Prize Money:" in element_text:
                    # need to split on &nbsp
                    prize_money = Decimal(sub(r'[^\d.]', '',element_text.split("\xa0")[1]))
                    parent.append(str(prize_money))
        
            # For each horse
            table_rows = soup.find_all("div", {"class": "index_rdc-table-row__XoMhX"})

            for row in table_rows:

                child = []
    
                # Finishing Position
                finishing_pos = row.find("div", {"class": "index_rdc-basic-text__AyDZW font-circular font-bold"})
                if finishing_pos is None:
                    finishing_pos = row.find("div", {"class": "index_rdc-basic-text__AyDZW font-circular"})
                if finishing_pos is not None:
                    # ignore scratchings, late scratchings, failed-to-finishes, disqualifieds and lost riders etc
                    if finishing_pos.text in ['SCR', 'LSCR', 'FF', 'DQ', 'LR', 'LP', 'F', 'BD']: 
                        continue
                    else:
                        position = int(only_numerics(finishing_pos.text))
                        child.append(str(position))

                # Horse Name
                horse_data = row.find_all(True, {"class": ["index_rdc-link--label__GFZdj",
                                                           "index_rdc-basic-text__AyDZW text-base text-grey-66 font-normal flex"]})
                horse_data_length = len(horse_data)
    
                if horse_data_length > 0:
                    # Horse Name & Barrier
                    if horse_data[0] is not None:
                        child.append(re.search(' (.*) ', horse_data[0].text).group().strip())
                        child.append(only_numerics(horse_data[0].text.split(" ")[-1]))
                else:
                    continue

                # Trainer
                if horse_data[1] is not None:        
                    child.append(horse_data[1].text)

                # Jockey
                if horse_data[-1] is not None:        
                    child.append(horse_data[-1].text)
    
                # Weight
                runner_details = row.find_all("div", {"class": ["index_rdc-basic-text__AyDZW",
                                                                "index_rdc-table-cell__XouUW index_rdc-table-cell__center__1nsfz"]})
                runner_details_length = len(runner_details)

                child.append(only_numerics(runner_details[6].text))

                # Prize ($)
                if ord(runner_details[7].text[0]) == 8211: # en-dash means no prize money
                    prize = 0
                else:
                    prize = Decimal(sub(r'[^\d.]', '',runner_details[7].text))
                child.append(str(prize))

                # 800m/400m
                if ord(runner_details[8].text[0]) == 8211: # en-dash means splits weren't recorded
                    child.append("")
                    child.append("")
                else:
                    child.append(only_numerics(runner_details[8].text.split('/')[0]))
                    child.append(only_numerics(runner_details[8].text.split('/')[1]))

                # Margin
                # rarely, the margin is not recorded
                if runner_details[9].text == "":
                    child.append("")
                else:
                    # winner gets a margin of 0
                    if position == 1:
                        margin = 0
                    else:
                        margin = only_numerics(runner_details[9].text)
                    child.append(str(margin))

                # Comments
                #print("comments=>", runner_details[10].text)

                # SP
                sp = only_numerics(runner_details[11].text)
                if sp == '':
                    sp = 0
                child.append(str(sp))

                # S-TAB win
                if runner_details_length > 12:
                    s_tab_win = only_numerics(runner_details[12].text)
                    if s_tab_win == '':
                        s_tab_win = 0
                    child.append(str(s_tab_win))

                    # S-TAB place
                    s_tab_place = only_numerics(runner_details[13].text)
                    if s_tab_place in ('', '..'): # runner did not place or No Third Dividend (N.T.D)
                        s_tab_place = 0
                    child.append(str(s_tab_place))

                print("parent=>", parent)            
                print("child=>", child)
                csvwriter.writerow(parent + child)
    
        fp.close()

    csvfile.close()

exit(0)
